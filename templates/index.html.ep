%# vim: set syntax=html:
% layout 'default';
% title 'jukebox';
<div id="app">
  <div class="progress">
    <span class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;">
      Hello
    </span>
  </div>Again
  <table class="table table-striped" id="tracklist">
    <tbody>
      <tr v-for="(track, idx) in tracklist">
        <td style="vertical-align: middle">
          <span v-if="idx == 0" class="fa fa-play" style="font-size:18px"></span>
          <span v-else style="font-size:18px">{{idx}}</span>
        </td>
        <td style="vertical-align: middle">
          <div class="title" style="font-size:16px">{{track.title}}</div>
          <div>{{track.artist_string}}</div>
          <div>({{track.album_title}} - {{track.album_date}})</div>
        </td>
        <td style="vertical-align: middle; text-align: right">
          <span style="font-size:24px; margin-right:10px">{{getTotalVotes(track)}}</span>
        </td>
        <td style="vertical-align: middle">
          <div style="margin-bottom:8px">
            <span class="fa fa-thumbs-up vote" value="1" v-on:click="submitVote(track.tlid, 1)" style="font-size:24px;cursor:pointer" />
          </div>
          <div>
            <span class="fa fa-thumbs-down vote" value="-1" v-on:click="submitVote(track.tlid, -1)" style="font-size:24px;cursor:pointer" />
          </div>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<script type="text/javascript">
  var app = new Vue({
    el: '#app',
    data: {
      socket: null,
      search_results: [],
      tracklist: [],
    },

    mounted: function () {
      var self = this;
      console.log('ready');
      // Create WebSocket connection.
      self.socket = new WebSocket('ws://10.0.0.121:3000/ws');

      // Connection opened
      self.socket.addEventListener('open', function (event) {
        console.log('WS connection established');
        /*
        self.socket.send(JSON.stringify({
          "method"    : "get_tracklist",
          "request_id": Date.now(),
        }));
        */
        /*
        self.socket.send(JSON.stringify({
          "search_type" : "artist",
          "search_text" : "kimbra",
          "request_id"   : Date.now(),
        }));
        */
      });

      // Listen for messages
      self.socket.addEventListener('message', function (event) {
        console.log('Message from server ', event.data);
        var local_data = JSON.parse(event.data);

        console.log(local_data.result);
        if (local_data.tracklist) {
          self.tracklist = local_data.tracklist;
          //self.tracklist && console.log(self.tracklist[0].title);
        } else if (local_data.event) {
          if (local_data.event === 'tracklist_changed') {
            self.socket.send(JSON.stringify({
              "method"    : "get_tracklist",
              "request_id": Date.now(),
            }));
          }
        }
      });
    },

    methods: {
      getTotalVotes: function(track) {
        var total = 0;
        Object.values(track.votes).forEach(function (vote) {
          console.log(vote);
          //console.log(vote.value);
          total += vote.value;
        });
        return total > 0 ? '+' + total : total;
      },
      artistsString: function(artists) {
        var returnString = artists[0].name;
        //console.log(artists);
        if (artists.length > 1) {
          for (var i = 1; i < artists.length; i++) {
            returnString += ', ' + artists[i].name;
          }
        }
        return returnString;
      },
      submitVote: function(tlid, value) {
        var postData = {
          "tlid": tlid,
          "value": value,
          "username": "matt",
        };
        $.post('/vote', postData, function(data) {
          console.log(data);
        });
      }
    }
  });

</script>



