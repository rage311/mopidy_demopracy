%# vim: set syntax=html:
% layout 'default';
% title 'jukebox';
<div id="app">
  <!--
  <div class="progress">
    <span class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;">
      Hello
    </span>
  </div>
  -->

  <%== $c->session('admin') == 0 ? '' : '<div style="text-align:center"> <span class="fa fa-play" v-on:click="playbackControl(\'play\')" style="cursor:pointer;font-size:24px;padding-right:5px;padding-left:5px"></span> <span class="fa fa-pause" v-on:click="playbackControl(\'pause\')" style="cursor:pointer;font-size:24px;padding-right:5px;padding-left:5px"></span> <span class="fa fa-stop" v-on:click="playbackControl(\'stop\')" style="cursor:pointer;font-size:24px;padding-right:5px;padding-left:5px"></span> <span class="fa fa-step-forward" v-on:click="playbackControl(\'next\')" style="cursor:pointer;font-size:24px;padding-right:5px;padding-left:5px"></span> </div>' %>

  <div class="container">

    <ul class="nav nav-tabs nav-justified">
      <li class="active"><a data-toggle="tab" href="#playlist">Playlist</a></li>
      <li><a data-toggle="tab" href="#search">Search</a></li>
    </ul>

    <div class="tab-content">

      <div id="playlist" class="tab-pane fade in active">
        <table class="table table-striped table-condensed" id="tracklist">
          <tbody>
            <tr v-for="(track, idx) in tracklist">
              <td style="vertical-align: middle">
                <span v-if="idx == 0" class="fa fa-play" style="font-size:18px"></span>
                <span v-else style="font-size:18px">{{idx}}</span>
              </td>
              <td style="vertical-align: middle">
                <div>
                  <span class="title" style="font-size:16px">{{track.title}}</span>
                  <span>({{formatMMSS(track.length)}})</span>
                </div>
                <div>{{track.artist_string}}</div>
                <div>[{{track.album_title}} - {{track.album_date}}]</div>
              </td>
              <td style="vertical-align: middle; text-align: right">
                <span style="font-size:24px; margin-right:10px">{{getTotalVotes(track)}}</span>
              </td>
              <td style="vertical-align: middle" v-if="idx !== 0">
                <div style="margin-bottom:8px">
                  <span class="fa fa-thumbs-up vote" value="1" v-on:click="submitVote(track.tlid, 1)" style="font-size:24px;cursor:pointer" />
                </div>
                <div>
                  <span class="fa fa-thumbs-down vote" value="-1" v-on:click="submitVote(track.tlid, -1)" style="font-size:24px;cursor:pointer" />
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>


      <div id="search" class="tab-pane fade">
        <br/>
        <form id="search" class="form-inline" @submit.prevent="search">
          <input type="text" class="form-control" placeholder="Song name" v-model="searchText"/>
          <button type="search" class="btn btn-default"><span class="fa fa-search"/></button>
        </form>
        <table class="table table-striped table-condensed" id="search_result">
          <tbody>
            <tr v-for="(track, idx) in search_results">
              <td style="vertical-align: middle">
                <span class="fa fa-plus" v-on:click="addTrack(track.uri)" style="font-size:24px;cursor:pointer;margin-left:10px" />
              </td>
              <td style="vertical-align: middle">
                <div>
                  <span class="title" style="font-size:16px">{{track.name}}</span>
                  <span>({{formatMMSS(track.length)}})</span>
                </div>
                <div>{{track.artists[0].name}}</div>
                <div>[{{track.album.name}}]</div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>

    </div>
  </div>
</div>


<script type="text/javascript">
  var app = new Vue({
    el: '#app',
    data: {
      socket: null,
      search_results: [],
      tracklist: [],
      searchText: null,
      heartbeatInterval: null,
    },

    mounted: function () {
      var self = this;
      console.log('ready');

      // Create WebSocket connection.
      self.socket = new WebSocket('ws://<%= $c->req->url->to_abs->host_port %>/ws');
      console.log('ws://<%= $c->req->url->to_abs->host_port %>/ws');

      // Connection opened
      self.socket.addEventListener('open', function (event) {
        console.log('WS connection established');
        self.heartbeatInterval = setInterval(function () {
          self.heartbeat();
        }.bind(self), 30000);
      });

      // Listen for messages
      self.socket.addEventListener('message', function (event) {
        console.log('Message from server ', event.data);
        var local_data = JSON.parse(event.data);

        console.log(local_data.result);
        if (local_data.tracklist) {
          self.tracklist = local_data.tracklist;
          //self.tracklist && console.log(self.tracklist[0].title);
        }
        else if (local_data.search_result) {
          self.search_results = local_data.search_result[0].tracks;
        }
        else if (local_data.event) {
          if (local_data.event === 'tracklist_changed') {
            /* self.socket.send(JSON.stringify({ */
            /*   "method"    : "get_tracklist", */
            /*   "request_id": Date.now(), */
            /* })); */
          }
        }
      });
    },

    methods: {
      formatMMSS: function (milliseconds) {
        var minutes = (Math.trunc(milliseconds / 1000 / 60)).toString();
        var seconds = Math.trunc(milliseconds / 1000 % 60);
        seconds = seconds.toString().length == 2 ? seconds : '0' + seconds;
        return minutes + ':' + seconds;
      },

      getTotalVotes: function(track) {
        var total = 0;
        Object.values(track.votes).forEach(function (vote) {
          console.log(vote);
          //console.log(vote.value);
          total += parseInt(vote.value);
        });
        console.log(total);
        return total > 0 ? '+' + total : total;
      },

      artistsString: function(artists) {
        var returnString = artists[0].name;
        if (artists.length == 1) { return returnString; }
        //console.log(artists);
        //if (artists.length > 1) {
          for (var i = 1; i < artists.length; i++) {
            returnString += ', ' + artists[i].name;
          }
        //}
        return returnString;
      },

      playbackControl: function(value) {
        $.post('/playback/' + value, function(data) {
          console.log('playbackControl data: ' + data);
        })
      },

      addTrack: function(uri) {
        var postData = {
          "uri" : uri,
          "user": "matt",
        };

        $.post('/add', postData, function(data) {
          console.log(data);
        });
      },

      submitVote: function(tlid, value) {
        var postData = {
          "tlid": tlid,
          "value": value,
          "user": "matt",
        };

        $.post('/vote', postData, function(data) {
          console.log(data);
        });
      },

      search: function() {
        return this.socket.send(JSON.stringify({
          //"search_type": "artist",
          "search_type": "track_name",
          "search_text": this.searchText,
          "method"     : "search",
          "request_id" : Date.now(),
        }));
      },

      heartbeat: function() {
        this.socket.send(JSON.stringify({
          "heartbeat": Date.now(),
        }));
      },
    }
  });

</script>



